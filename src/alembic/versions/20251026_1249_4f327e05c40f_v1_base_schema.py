"""v1_base_schema

This is the base migration for v1 schema with INTEGER primary keys.
This creates the complete v1 schema from scratch.

For users upgrading from v0:
- v0 â†’ v1 requires a database reset (data cannot be migrated)
- The app will automatically detect v0 databases and reset them
- All data will be lost during the upgrade

Revision ID: 4f327e05c40f
Revises: None
Create Date: 2025-10-26 12:49:15.608357

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = "4f327e05c40f"
down_revision: Union[str, None] = None  # Standalone base migration
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Create the complete v1 schema from scratch."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "MediaItem",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("imdb_id", sa.String(), nullable=True),
        sa.Column("tvdb_id", sa.String(), nullable=True),
        sa.Column("tmdb_id", sa.String(), nullable=True),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("poster_path", sa.String(), nullable=True),
        sa.Column("number", sa.Integer(), nullable=True),
        sa.Column("type", sa.String(), nullable=False),
        sa.Column("requested_at", sa.DateTime(), nullable=True),
        sa.Column("requested_by", sa.String(), nullable=True),
        sa.Column("requested_id", sa.Integer(), nullable=True),
        sa.Column("indexed_at", sa.DateTime(), nullable=True),
        sa.Column("scraped_at", sa.DateTime(), nullable=True),
        sa.Column("scraped_times", sa.Integer(), nullable=True),
        sa.Column("active_stream", sa.JSON(), nullable=True),
        sa.Column("aliases", sa.JSON(), nullable=True),
        sa.Column("is_anime", sa.Boolean(), nullable=True),
        sa.Column("network", sa.String(), nullable=True),
        sa.Column("country", sa.String(), nullable=True),
        sa.Column("language", sa.String(), nullable=True),
        sa.Column("aired_at", sa.DateTime(), nullable=True),
        sa.Column("year", sa.Integer(), nullable=True),
        sa.Column("genres", sa.JSON(), nullable=True),
        sa.Column("rating", sa.Float(), nullable=True),
        sa.Column("content_rating", sa.String(), nullable=True),
        sa.Column("updated", sa.Boolean(), nullable=True),
        sa.Column("guid", sa.String(), nullable=True),
        sa.Column("overseerr_id", sa.Integer(), nullable=True),
        sa.Column(
            "last_state",
            sa.Enum(
                "Unknown",
                "Unreleased",
                "Ongoing",
                "Requested",
                "Indexed",
                "Scraped",
                "Downloaded",
                "Symlinked",
                "Completed",
                "PartiallyCompleted",
                "Failed",
                "Paused",
                name="states",
            ),
            nullable=True,
        ),
        sa.Column("failed_attempts", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("ix_mediaitem_aired_at", "MediaItem", ["aired_at"], unique=False)
    op.create_index(
        "ix_mediaitem_content_rating", "MediaItem", ["content_rating"], unique=False
    )
    op.create_index("ix_mediaitem_country", "MediaItem", ["country"], unique=False)
    op.create_index("ix_mediaitem_imdb_id", "MediaItem", ["imdb_id"], unique=False)
    op.create_index("ix_mediaitem_language", "MediaItem", ["language"], unique=False)
    op.create_index("ix_mediaitem_network", "MediaItem", ["network"], unique=False)
    op.create_index(
        "ix_mediaitem_overseerr_id", "MediaItem", ["overseerr_id"], unique=False
    )
    op.create_index(
        "ix_mediaitem_poster_path", "MediaItem", ["poster_path"], unique=False
    )
    op.create_index("ix_mediaitem_rating", "MediaItem", ["rating"], unique=False)
    op.create_index(
        "ix_mediaitem_requested_by", "MediaItem", ["requested_by"], unique=False
    )
    op.create_index("ix_mediaitem_title", "MediaItem", ["title"], unique=False)
    op.create_index("ix_mediaitem_tmdb_id", "MediaItem", ["tmdb_id"], unique=False)
    op.create_index("ix_mediaitem_tvdb_id", "MediaItem", ["tvdb_id"], unique=False)
    op.create_index("ix_mediaitem_type", "MediaItem", ["type"], unique=False)
    op.create_index(
        "ix_mediaitem_type_aired_at", "MediaItem", ["type", "aired_at"], unique=False
    )
    op.create_index("ix_mediaitem_year", "MediaItem", ["year"], unique=False)
    op.create_table(
        "ScheduledTask",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("item_id", sa.Integer(), nullable=False),
        sa.Column("task_type", sa.String(), nullable=False),
        sa.Column("scheduled_for", sa.DateTime(), nullable=False),
        sa.Column(
            "status",
            sa.Enum(
                "pending", "completed", "failed", "cancelled", name="scheduledstatus"
            ),
            nullable=False,
        ),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("executed_at", sa.DateTime(), nullable=True),
        sa.Column("reason", sa.String(), nullable=True),
        sa.Column("offset_seconds", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_scheduledtask_scheduled_for",
        "ScheduledTask",
        ["scheduled_for"],
        unique=False,
    )
    op.create_index(
        "ix_scheduledtask_status", "ScheduledTask", ["status"], unique=False
    )
    op.create_index(
        "ux_scheduledtask_item_task_time",
        "ScheduledTask",
        ["item_id", "task_type", "scheduled_for"],
        unique=True,
    )
    op.create_table(
        "Stream",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("infohash", sa.String(), nullable=False),
        sa.Column("raw_title", sa.String(), nullable=False),
        sa.Column("parsed_title", sa.String(), nullable=False),
        sa.Column("rank", sa.Integer(), nullable=False),
        sa.Column("lev_ratio", sa.Float(), nullable=False),
        sa.Column("resolution", sa.String(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index("ix_stream_infohash", "Stream", ["infohash"], unique=False)
    op.create_index("ix_stream_parsed_title", "Stream", ["parsed_title"], unique=False)
    op.create_index("ix_stream_rank", "Stream", ["rank"], unique=False)
    op.create_index("ix_stream_raw_title", "Stream", ["raw_title"], unique=False)
    op.create_index("ix_stream_resolution", "Stream", ["resolution"], unique=False)
    op.create_table(
        "FilesystemEntry",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("entry_type", sa.String(), nullable=False),
        sa.Column("file_size", sa.BigInteger(), nullable=False),
        sa.Column("is_directory", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.DateTime(), nullable=False),
        sa.Column("updated_at", sa.DateTime(), nullable=False),
        sa.Column("available_in_vfs", sa.Boolean(), nullable=False),
        sa.Column("media_item_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["media_item_id"], ["MediaItem.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_filesystem_entry_created_at",
        "FilesystemEntry",
        ["created_at"],
        unique=False,
    )
    op.create_index(
        "ix_filesystem_entry_media_item_id",
        "FilesystemEntry",
        ["media_item_id"],
        unique=False,
    )
    op.create_index(
        "ix_filesystem_entry_type", "FilesystemEntry", ["entry_type"], unique=False
    )
    op.create_table(
        "Movie",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["id"], ["MediaItem.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "Show",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("release_data", sa.JSON(), nullable=True),
        sa.Column("tvdb_status", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["id"], ["MediaItem.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "StreamBlacklistRelation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("media_item_id", sa.Integer(), nullable=False),
        sa.Column("stream_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["media_item_id"], ["MediaItem.id"], ondelete="CASCADE"
        ),
        sa.ForeignKeyConstraint(["stream_id"], ["Stream.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_streamblacklistrelation_media_item_id",
        "StreamBlacklistRelation",
        ["media_item_id"],
        unique=False,
    )
    op.create_index(
        "ix_streamblacklistrelation_stream_id",
        "StreamBlacklistRelation",
        ["stream_id"],
        unique=False,
    )
    op.create_table(
        "StreamRelation",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=False),
        sa.Column("child_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["child_id"], ["Stream.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["parent_id"], ["MediaItem.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        "ix_streamrelation_child_id", "StreamRelation", ["child_id"], unique=False
    )
    op.create_index(
        "ix_streamrelation_parent_id", "StreamRelation", ["parent_id"], unique=False
    )
    op.create_table(
        "MediaEntry",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("original_filename", sa.String(), nullable=False),
        sa.Column("download_url", sa.String(), nullable=True),
        sa.Column("unrestricted_url", sa.String(), nullable=True),
        sa.Column("provider", sa.String(), nullable=True),
        sa.Column("provider_download_id", sa.String(), nullable=True),
        sa.Column(
            "library_profiles",
            sa.JSON(),
            nullable=True,
            comment="List of library profile keys this entry matches (from settings.json)",
        ),
        sa.Column(
            "parsed_data",
            sa.JSON(),
            nullable=True,
            comment="Cached parsed filename data from PTT (item_type, season, episodes)",
        ),
        sa.Column(
            "probed_data",
            sa.JSON(),
            nullable=True,
            comment="Cached ffprobe media analysis data (video, audio, subtitles, etc.)",
        ),
        sa.ForeignKeyConstraint(["id"], ["FilesystemEntry.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_MediaEntry_original_filename"),
        "MediaEntry",
        ["original_filename"],
        unique=False,
    )
    op.create_index(
        "ix_media_entry_original_filename",
        "MediaEntry",
        ["original_filename"],
        unique=False,
    )
    op.create_index("ix_media_entry_provider", "MediaEntry", ["provider"], unique=False)
    op.create_table(
        "Season",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["id"], ["MediaItem.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["parent_id"], ["Show.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "SubtitleEntry",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("language", sa.String(), nullable=False),
        sa.Column(
            "parent_original_filename",
            sa.String(),
            nullable=True,
            comment="Original filename of the parent MediaEntry (video file)",
        ),
        sa.Column("content", sa.Text(), nullable=True),
        sa.Column("file_hash", sa.String(), nullable=True),
        sa.Column("video_file_size", sa.BigInteger(), nullable=True),
        sa.Column("opensubtitles_id", sa.String(), nullable=True),
        sa.ForeignKeyConstraint(["id"], ["FilesystemEntry.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_SubtitleEntry_file_hash"), "SubtitleEntry", ["file_hash"], unique=False
    )
    op.create_index(
        op.f("ix_SubtitleEntry_language"), "SubtitleEntry", ["language"], unique=False
    )
    op.create_index(
        op.f("ix_SubtitleEntry_opensubtitles_id"),
        "SubtitleEntry",
        ["opensubtitles_id"],
        unique=False,
    )
    op.create_index(
        op.f("ix_SubtitleEntry_parent_original_filename"),
        "SubtitleEntry",
        ["parent_original_filename"],
        unique=False,
    )
    op.create_index(
        "ix_subtitle_entry_file_hash", "SubtitleEntry", ["file_hash"], unique=False
    )
    op.create_index(
        "ix_subtitle_entry_language", "SubtitleEntry", ["language"], unique=False
    )
    op.create_index(
        "ix_subtitle_entry_opensubtitles_id",
        "SubtitleEntry",
        ["opensubtitles_id"],
        unique=False,
    )
    op.create_index(
        "ix_subtitle_entry_parent_original_filename",
        "SubtitleEntry",
        ["parent_original_filename"],
        unique=False,
    )
    op.create_table(
        "Episode",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("parent_id", sa.Integer(), nullable=False),
        sa.Column("absolute_number", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["id"], ["MediaItem.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["parent_id"], ["Season.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade is not supported for v1 base schema."""
    raise NotImplementedError("Downgrade from v1 base schema is not supported.")
